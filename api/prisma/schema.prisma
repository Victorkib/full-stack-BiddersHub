// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// This is your corrected Prisma schema

// This is your corrected Prisma schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Post {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  price      Int
  images     String[]
  address    String
  city       String
  bedroom    Int
  bathroom   Int
  latitude   String
  longitude  String
  type       Type
  property   Property
  createdAt  DateTime    @default(now())
  user       User        @relation(fields: [userId], references: [id])
  userId     String      @db.ObjectId
  postDetail PostDetail?
  savedPosts SavedPost[]
  sessions   PostOnSession[]
}

enum Type {
  buy
  rent
}

enum Property {
  apartment
  house
  condo
  land
}

model PostDetail {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  desc       String
  utilities  String?
  pet        String?
  income     String?
  size       Int?
  school     Int?
  bus        Int?
  restaurant Int?
  post       Post    @relation(fields: [postId], references: [id])
  postId     String  @unique @db.ObjectId
}

model SavedPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model User {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  email      String      @unique
  username   String      @unique
  password   String
  avatar     String?
  createdAt  DateTime    @default(now())
  posts      Post[]
  savedPosts SavedPost[]
  sessions   Session[]
  chats      Chat[]      @relation(fields: [chatIDs], references: [id])
  chatIDs    String[]    @db.ObjectId
  company    Company     @relation(fields: [companyId], references: [id]) // Specify fields and references here
  companyId  String      @db.ObjectId
  documents  Document[]  // Relation to Document
}

model Company {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  companyName   String
  companyAddress String
  users         User[]    // Define the relation without `fields` or `references`
}

model Document {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  documentType String
  url          String
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @db.ObjectId
}

model Chat {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  users     User[]    @relation(fields: [userIDs], references: [id])
  userIDs   String[]  @db.ObjectId
  createdAt DateTime  @default(now())
  seenBy    String[]  @db.ObjectId
  messages  Message[]
  lastMessage String?
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  userId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Session {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  createdBy   User          @relation(fields: [createdById], references: [id])
  createdById String        @db.ObjectId
  isActive    Boolean       @default(false)
  items       Item[]
  posts       PostOnSession[]
}

model Item {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  session     Session  @relation(fields: [sessionId], references: [id])
  sessionId   String   @db.ObjectId
}

model PostOnSession {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  postId    String @db.ObjectId
  sessionId String @db.ObjectId
  post      Post   @relation(fields: [postId], references: [id])
  session   Session @relation(fields: [sessionId], references: [id])

  @@unique([postId, sessionId])
}

model Bidder {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  username  String    @unique
  password  String
  createdAt DateTime  @default(now())
  bids      Bid[]
}

model Bid {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  amount    Float
  itemId    String   @db.ObjectId
  itemImage String
  createdAt DateTime @default(now())
  bidder    Bidder   @relation(fields: [bidderId], references: [id])
  bidderId  String   @db.ObjectId
}
